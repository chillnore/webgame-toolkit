<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="100%"
		 height="100%"
		 xmlns:ui="statm.dev.imageresourceviewer.ui.*"
		 xmlns:skins="statm.dev.imageresourceviewer.ui.skins.*"
		 clipAndEnableScrolling="true">
	<fx:Script>
		<![CDATA[
			import mx.core.FlexGlobals;
			
			import statm.dev.imageresourceviewer.AppState;
			import statm.dev.imageresourceviewer.data.type.DirectionType;

			protected function cbxShowFX_changeHandler(event:Event):void
			{
				FlexGlobals.topLevelApplication.setFXVisibility(cbxShowFX.selected);
			}

			public function updateBackground():void
			{
				var bgX:int = playbackBg.x;
				var bgY:int = playbackBg.y;

				if (AppState.instance.currentAction == "跑动" || AppState.instance.currentAction == "乘骑移动" || AppState.instance.currentAction == "running" || AppState.instance.currentAction == "mount_running")
				{
					var pxSpeed:int = Math.ceil(AppState.instance.movingSpeed * .05);
					var pxDiagSpeed:int = Math.ceil(pxSpeed / Math.SQRT2);

					switch (AppState.instance.currentDirection)
					{
						case DirectionType.N:
							bgY += pxSpeed;
							break;

						case DirectionType.NE:
							bgX -= pxDiagSpeed;
							bgY += pxDiagSpeed;
							break;

						case DirectionType.E:
							bgX -= pxSpeed;
							break;

						case DirectionType.SE:
							bgX -= pxDiagSpeed;
							bgY -= pxDiagSpeed;
							break;

						case DirectionType.S:
							bgY -= pxSpeed;
							break;

						case DirectionType.SW:
							bgX += pxDiagSpeed;
							bgY -= pxDiagSpeed;
							break;

						case DirectionType.W:
							bgX += pxSpeed;
							break;

						case DirectionType.NW:
							bgX += pxDiagSpeed;
							bgY += pxDiagSpeed;
							break;
					}

					var maxScrollX:int = playbackBg.width - grpPlaybackBg.width;
					var maxScrollY:int = playbackBg.height - grpPlaybackBg.height;

					if (bgX < -maxScrollX)
					{
						bgX += maxScrollX;
					}
					if (bgX > 0)
					{
						bgX -= maxScrollX;
					}
					if (bgY < -maxScrollY)
					{
						bgY += maxScrollY;
					}
					if (bgY > 0)
					{
						bgY -= maxScrollY;
					}

					playbackBg.x = bgX;
					playbackBg.y = bgY;
				}
			}

			[Bindable]
			private var draggingAnchor:Boolean = false;

			protected function playbackGroup_mouseMoveHandler(event:MouseEvent):void
			{
				var crosshairY:int = playbackGroup.mouseY - 12;
				if (crosshairY > playbackGroup.height - crosshair.height)
				{
					crosshairY = playbackGroup.height - crosshair.height;
				}
				if (crosshairY < 0)
				{
					crosshairY = 0;
				}
				crosshair.y = crosshairY;

				if (draggingAnchor)
				{
					anchorPoint.bottom = playbackGroup.height - crosshair.y - 17;
				}
			}

			protected function cbxShowCrosshair_changeHandler(event:Event):void
			{
				if (cbxShowCrosshair.selected)
				{
					playbackGroup.addEventListener(MouseEvent.MOUSE_DOWN, anchor_mouseDownHandler);
				}
				else
				{
					crosshair.visible = false;
					playbackGroup.removeEventListener(MouseEvent.MOUSE_DOWN, anchor_mouseDownHandler);
				}
			}

			protected function anchor_mouseDownHandler(event:MouseEvent):void
			{
				if (event.ctrlKey)
				{
					draggingAnchor = true;
					anchorPoint.bottom = playbackGroup.height - crosshair.y - 17;
					stage.addEventListener(MouseEvent.MOUSE_UP, anchor_mouseUpHandler);
				}
			}

			protected function anchor_mouseUpHandler(event:MouseEvent):void
			{
				draggingAnchor = false;
				AppState.instance.anchor = int(anchorPoint.bottom) + 3;
				stage.removeEventListener(MouseEvent.MOUSE_UP, anchor_mouseUpHandler);
			}
			
			private var lastOffsetY:int = 0;
			
			protected function cbxShowOffsetSlider_changeHandler(event:Event):void
			{
				if (cbxShowOffsetSlider.selected)
				{
					nsOffsetY.setFocus();
					AppState.instance.offsetY = lastOffsetY;
					nsOffsetY.textDisplay.selectRange(0, 0);
				}
				else
				{
					stage.focus = null;
					lastOffsetY = AppState.instance.offsetY;
					AppState.instance.offsetY = 0;
				}
			}

			protected function playbackGroup_rollOverHandler(event:MouseEvent):void
			{
				crosshair.visible = (cbxShowCrosshair.selected);
			}

			protected function playbackGroup_rollOutHandler(event:MouseEvent):void
			{
				crosshair.visible = false;
			}
		]]>
	</fx:Script>

	<s:Group id="grpPlaybackBg"
			 clipAndEnableScrolling="true"
			 left="0"
			 right="100"
			 top="0"
			 bottom="60">
		<s:Image id="playbackBg"
				 source="{UIResource.PLAYBACK_BG}"/>

		<s:Group id="playbackGroup"
				 rollOver="playbackGroup_rollOverHandler(event)"
				 rollOut="playbackGroup_rollOutHandler(event)"
				 mouseMove="playbackGroup_mouseMoveHandler(event)"
				 minWidth="340"
				 minHeight="340"
				 horizontalCenter="0"
				 verticalCenter="0">
			<s:Rect id="anchorBg"
					visible="{cbxShowCrosshair.selected}"
					top="0"
					bottom="0"
					left="0"
					right="0">
				<s:fill>
					<s:SolidColor color="#0066CC"
								  alpha=".4"/>
				</s:fill>
			</s:Rect>

			<s:DataGroup id="layerDataGroup"
						 dataProvider="{AppState.instance.playingElements}"
						 itemRenderer="statm.dev.imageresourceviewer.ui.itemRenderers.PlaybackItemRenderer"/>

			<s:Ellipse id="anchorPoint"
					   horizontalCenter="0"
					   visible="{cbxShowCrosshair.selected}"
					   bottom="{AppState.instance.anchor - 3}"
					   width="10"
					   height="10">
				<s:fill>
					<s:SolidColor color="#FF0000"/>
				</s:fill>
				<s:filters>
					<s:GlowFilter color="#FFFFFF"/>
				</s:filters>
			</s:Ellipse>

			<s:Label right="{playbackGroup.width - anchorPoint.x}"
					 y="{anchorPoint.y + 7}"
					 visible="{cbxShowCrosshair.selected}"
					 text="{(playbackGroup.height - anchorPoint.y - 7).toString()}"
					 color="#FFFFFF"
					 fontWeight="bold"
					 fontSize="10"/>

			<s:Group id="crosshair"
					 visible="false"
					 horizontalCenter="0"
					 width="24"
					 height="24">
				<s:Line id="crosshairV"
						horizontalCenter="0"
						verticalCenter="0"
						height="20">
					<s:stroke>
						<s:SolidColorStroke color="#FFFFFF"
											weight="2"/>
					</s:stroke>
				</s:Line>
				<s:Line id="crosshairH"
						horizontalCenter="0"
						verticalCenter="0"
						width="20">
					<s:stroke>
						<s:SolidColorStroke color="#FFFFFF"
											weight="2"/>
					</s:stroke>
				</s:Line>
				<s:Label id="crosshairCoord"
						 x="15"
						 y="2"
						 color="#FFFFFF"
						 text="{(playbackGroup.height - crosshair.y - 14).toString()}"
						 fontWeight="bold"
						 fontSize="8">
				</s:Label>
			</s:Group>
		</s:Group>
	</s:Group>

	<s:VGroup right="0"
			  top="0"
			  gap="8">
		<s:TileGroup columnWidth="30"
					 horizontalGap="1"
					 verticalGap="1">
			<ui:DirectionButton skinClass="statm.dev.imageresourceviewer.ui.skins.DirectionButtonSkin"
								defaultIcon="{UIResource.NW_ICON}"
								highlightIcon="{UIResource.NW_ICON_OVER}"
								selected="{AppState.instance.currentDirection == DirectionType.NW}"
								mouseEnabled="{AppState.instance.currentDirection != DirectionType.NW}"
								click="FlexGlobals.topLevelApplication.setDirection(DirectionType.NW)"/>
			<ui:DirectionButton selected="{AppState.instance.currentDirection == DirectionType.N}"
								defaultIcon="{UIResource.N_ICON}"
								highlightIcon="{UIResource.N_ICON_OVER}"
								mouseEnabled="{AppState.instance.currentDirection != DirectionType.N}"
								click="FlexGlobals.topLevelApplication.setDirection(DirectionType.N)"/>
			<ui:DirectionButton selected="{AppState.instance.currentDirection == DirectionType.NE}"
								defaultIcon="{UIResource.NE_ICON}"
								highlightIcon="{UIResource.NE_ICON_OVER}"
								mouseEnabled="{AppState.instance.currentDirection != DirectionType.NE}"
								click="FlexGlobals.topLevelApplication.setDirection(DirectionType.NE)"/>
			<ui:DirectionButton selected="{AppState.instance.currentDirection == DirectionType.W}"
								defaultIcon="{UIResource.W_ICON}"
								highlightIcon="{UIResource.W_ICON_OVER}"
								mouseEnabled="{AppState.instance.currentDirection != DirectionType.W}"
								click="FlexGlobals.topLevelApplication.setDirection(DirectionType.W)"/>
			<s:Spacer/>
			<ui:DirectionButton selected="{AppState.instance.currentDirection == DirectionType.E}"
								defaultIcon="{UIResource.E_ICON}"
								highlightIcon="{UIResource.E_ICON_OVER}"
								mouseEnabled="{AppState.instance.currentDirection != DirectionType.E}"
								click="FlexGlobals.topLevelApplication.setDirection(DirectionType.E)"/>
			<ui:DirectionButton selected="{AppState.instance.currentDirection == DirectionType.SW}"
								defaultIcon="{UIResource.SW_ICON}"
								highlightIcon="{UIResource.SW_ICON_OVER}"
								mouseEnabled="{AppState.instance.currentDirection != DirectionType.SW}"
								click="FlexGlobals.topLevelApplication.setDirection(DirectionType.SW)"/>
			<ui:DirectionButton selected="{AppState.instance.currentDirection == DirectionType.S}"
								defaultIcon="{UIResource.S_ICON}"
								highlightIcon="{UIResource.S_ICON_OVER}"
								mouseEnabled="{AppState.instance.currentDirection != DirectionType.S}"
								click="FlexGlobals.topLevelApplication.setDirection(DirectionType.S)"/>
			<ui:DirectionButton selected="{AppState.instance.currentDirection == DirectionType.SE}"
								defaultIcon="{UIResource.SE_ICON}"
								highlightIcon="{UIResource.SE_ICON_OVER}"
								mouseEnabled="{AppState.instance.currentDirection != DirectionType.SE}"
								click="FlexGlobals.topLevelApplication.setDirection(DirectionType.SE)"/>
		</s:TileGroup>

		<s:CheckBox id="cbxShowFX"
					label="显示特效"
					selected="{AppState.instance.fxEnabled}"
					change="cbxShowFX_changeHandler(event)"
					skinClass="statm.dev.imageresourceviewer.ui.skins.MetroCheckBoxSkin"/>

		<s:CheckBox id="cbxShowBackground"
					label="显示背景"
					selected="@{playbackBg.visible}"
					skinClass="statm.dev.imageresourceviewer.ui.skins.MetroCheckBoxSkin"/>

		<s:CheckBox id="cbxShowCrosshair"
					label="设置锚点"
					selected="false"
					change="cbxShowCrosshair_changeHandler(event)"
					skinClass="statm.dev.imageresourceviewer.ui.skins.MetroCheckBoxSkin"/>

		<s:CheckBox id="cbxShowOffsetSlider"
					label="设置偏移"
					selected="false"
					change="cbxShowOffsetSlider_changeHandler(event)"
					skinClass="statm.dev.imageresourceviewer.ui.skins.MetroCheckBoxSkin"/>

		<s:NumericStepper id="nsOffsetY"
						  width="100%"
						  visible="{cbxShowOffsetSlider.selected}"
						  includeInLayout="{cbxShowOffsetSlider.selected}"
						  minimum="-170"
						  maximum="170"
						  stepSize="1"
						  focusEnabled="false"
						  value="@{AppState.instance.offsetY}"
						  skinClass="statm.dev.imageresourceviewer.ui.skins.MetroNumericStepperSkin"/>
	</s:VGroup>

	<ui:PlaybackBar id="playbackBar"
					bottom="0"
					left="0"
					right="0"/>
</s:Group>
