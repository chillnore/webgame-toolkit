<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="100%"
		 height="100%"
		 xmlns:ui="statm.dev.imageresourceviewer.ui.*"
		 xmlns:skins="statm.dev.imageresourceviewer.ui.skins.*"
		 clipAndEnableScrolling="true">
	<fx:Script>
		<![CDATA[
			import mx.core.FlexGlobals;

			import statm.dev.imageresourceviewer.AppState;
			import statm.dev.imageresourceviewer.data.type.DirectionType;

			protected function cbxShowFX_changeHandler(event : Event) : void
			{
				FlexGlobals.topLevelApplication.setFXVisibility(cbxShowFX.selected);
			}

			public function updateBackground() : void
			{
				var bgX : int = playbackBg.x;
				var bgY : int = playbackBg.y;

				if (AppState.instance.currentAction == "跑动" || AppState.instance.currentAction == "乘骑移动")
				{
					var pxSpeed : int = Math.ceil(AppState.instance.movingSpeed * .05);
					var pxDiagSpeed : int = Math.ceil(pxSpeed / Math.SQRT2);

					switch (AppState.instance.currentDirection)
					{
						case DirectionType.N:
							bgY += pxSpeed;
							break;

						case DirectionType.NE:
							bgX -= pxDiagSpeed;
							bgY += pxDiagSpeed;
							break;

						case DirectionType.E:
							bgX -= pxSpeed;
							break;

						case DirectionType.SE:
							bgX -= pxDiagSpeed;
							bgY -= pxDiagSpeed;
							break;

						case DirectionType.S:
							bgY -= pxSpeed;
							break;

						case DirectionType.SW:
							bgX += pxDiagSpeed;
							bgY -= pxDiagSpeed;
							break;

						case DirectionType.W:
							bgX += pxSpeed;
							break;

						case DirectionType.NW:
							bgX += pxDiagSpeed;
							bgY += pxDiagSpeed;
							break;
					}
					
					var maxScrollX : int = playbackBg.width - grpPlaybackBg.width;
					var maxScrollY : int = playbackBg.height - grpPlaybackBg.height;
					
					if (bgX < -maxScrollX)
					{
						bgX += maxScrollX;
					}
					if (bgX > 0)
					{
						bgX -= maxScrollX;
					}
					if (bgY < -maxScrollY)
					{
						bgY += maxScrollY;
					}
					if (bgY > 0)
					{
						bgY -= maxScrollY;
					}
					
					playbackBg.x = bgX;
					playbackBg.y = bgY;
				}
			}
		]]>
	</fx:Script>

	<s:Group id="grpPlaybackBg"
			 clipAndEnableScrolling="true"
			 left="0"
			 right="100"
			 top="0"
			 bottom="60">
		<s:Image id="playbackBg"
				 source="{UIResource.PLAYBACK_BG}"/>
	</s:Group>

	<s:DataGroup id="layerDataGroup"
				 horizontalCenter="0"
				 verticalCenter="0"
				 dataProvider="{AppState.instance.selectedElements}"
				 itemRenderer="statm.dev.imageresourceviewer.ui.itemRenderers.PlaybackItemRenderer"/>

	<s:VGroup right="0"
			  top="0"
			  gap="8">
		<s:TileGroup columnWidth="30"
					 horizontalGap="1"
					 verticalGap="1">
			<ui:DirectionButton skinClass="statm.dev.imageresourceviewer.ui.skins.DirectionButtonSkin"
								defaultIcon="{UIResource.NW_ICON}"
								highlightIcon="{UIResource.NW_ICON_OVER}"
								selected="{AppState.instance.currentDirection == DirectionType.NW}"
								mouseEnabled="{AppState.instance.currentDirection != DirectionType.NW}"
								click="FlexGlobals.topLevelApplication.setDirection(DirectionType.NW)"/>
			<ui:DirectionButton selected="{AppState.instance.currentDirection == DirectionType.N}"
								defaultIcon="{UIResource.N_ICON}"
								highlightIcon="{UIResource.N_ICON_OVER}"
								mouseEnabled="{AppState.instance.currentDirection != DirectionType.N}"
								click="FlexGlobals.topLevelApplication.setDirection(DirectionType.N)"/>
			<ui:DirectionButton selected="{AppState.instance.currentDirection == DirectionType.NE}"
								defaultIcon="{UIResource.NE_ICON}"
								highlightIcon="{UIResource.NE_ICON_OVER}"
								mouseEnabled="{AppState.instance.currentDirection != DirectionType.NE}"
								click="FlexGlobals.topLevelApplication.setDirection(DirectionType.NE)"/>
			<ui:DirectionButton selected="{AppState.instance.currentDirection == DirectionType.W}"
								defaultIcon="{UIResource.W_ICON}"
								highlightIcon="{UIResource.W_ICON_OVER}"
								mouseEnabled="{AppState.instance.currentDirection != DirectionType.W}"
								click="FlexGlobals.topLevelApplication.setDirection(DirectionType.W)"/>
			<s:Spacer/>
			<ui:DirectionButton selected="{AppState.instance.currentDirection == DirectionType.E}"
								defaultIcon="{UIResource.E_ICON}"
								highlightIcon="{UIResource.E_ICON_OVER}"
								mouseEnabled="{AppState.instance.currentDirection != DirectionType.E}"
								click="FlexGlobals.topLevelApplication.setDirection(DirectionType.E)"/>
			<ui:DirectionButton selected="{AppState.instance.currentDirection == DirectionType.SW}"
								defaultIcon="{UIResource.SW_ICON}"
								highlightIcon="{UIResource.SW_ICON_OVER}"
								mouseEnabled="{AppState.instance.currentDirection != DirectionType.SW}"
								click="FlexGlobals.topLevelApplication.setDirection(DirectionType.SW)"/>
			<ui:DirectionButton selected="{AppState.instance.currentDirection == DirectionType.S}"
								defaultIcon="{UIResource.S_ICON}"
								highlightIcon="{UIResource.S_ICON_OVER}"
								mouseEnabled="{AppState.instance.currentDirection != DirectionType.S}"
								click="FlexGlobals.topLevelApplication.setDirection(DirectionType.S)"/>
			<ui:DirectionButton selected="{AppState.instance.currentDirection == DirectionType.SE}"
								defaultIcon="{UIResource.SE_ICON}"
								highlightIcon="{UIResource.SE_ICON_OVER}"
								mouseEnabled="{AppState.instance.currentDirection != DirectionType.SE}"
								click="FlexGlobals.topLevelApplication.setDirection(DirectionType.SE)"/>
		</s:TileGroup>

		<s:CheckBox id="cbxShowFX"
					label="显示特效"
					selected="{AppState.instance.fxEnabled}"
					change="cbxShowFX_changeHandler(event)"
					skinClass="statm.dev.imageresourceviewer.ui.skins.MetroCheckBoxSkin"/>

		<s:CheckBox id="cbxShowBackground"
					label="显示背景"
					selected="@{grpPlaybackBg.visible}"
					skinClass="statm.dev.imageresourceviewer.ui.skins.MetroCheckBoxSkin"/>
	</s:VGroup>

	<ui:PlaybackBar id="playbackBar"
					bottom="0"
					left="0"
					right="0"/>
</s:Group>
